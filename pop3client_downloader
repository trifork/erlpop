#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ./_build/default/lib/pop3client/ebin -smp enable -sname pop3client_downloader

parse_options([], Options)         -> Options;
parse_options(["--" | _], Options) -> Options;
parse_options(["-"  | Args], _Options) -> 
    io:format("Misplaced - argument\n"),
    parse_options(Args, error);
parse_options([[$-, $- | Arg1], "-" | Args], Options) ->
    %% Get stdin input 
    Input = io:get_line(Arg1 ++ ": ") -- "\n",
    parse_options([[$-, $- | Arg1], Input | Args], Options);
parse_options([[$-, $- | Arg1], Arg2 | Args], Options) ->
    %% option=value or option value, because the = is optional
    %% split at first =, if any
    {OptionName, OptionValue, OtherArgs} = case re:split(Arg1, "=", [{return, list}, {parts, 2}, {offset, 1}]) of
      [Key, Value]  -> {Key, Value, [Arg2 | Args]};
      [Arg1]        -> {Arg1, Arg2,  Args}
    end,
    {NewOptions, NewArgs} = case get_option_type(OptionName) of
       %% boolean; arg2 must be true/false
       {ok, boolean} -> case OptionValue of
                          [$- | _] -> {put_option(OptionName, true, Options), [OptionValue | OtherArgs]}; % boolean single argument, implies value true
                          _        -> LcOptionValue = string:lowercase(OptionValue),
                                      case lists:member(LcOptionValue, ["false", "true"]) of
                                         true -> {put_option(OptionName, list_to_atom(LcOptionValue), Options), OtherArgs};
                                         _    -> io:format("~s parameter must be true or false~n", [OptionName]), {error, OtherArgs}
                                      end
                        end;
       %% integer; arg2 must be integer 
       {ok, integer} -> case string:to_integer(OptionValue) of
                            {Num,[]} -> {put_option(OptionName, Num, Options), OtherArgs};
                            _        -> io:format("~s parameter, ~s must be an integer~n", [OptionName, OptionValue]), {error, OtherArgs}
                        end;
       {ok, _}       -> {put_option(OptionName, OptionValue, Options), OtherArgs};
       error         -> io:format("Unknown argument: -~s\n", [OptionName]), {error, OtherArgs}
    end,
    parse_options(NewArgs, NewOptions);
parse_options([Arg1 | Args], _Options) ->
    io:format("Unknown argument: ~s\n", [Arg1]), 
    parse_options(Args, error).

%% Only call this if verified that OptionName is a valid option. 
put_option(_OptionName, _Value, error) -> error;
put_option(OptionName, Value, Options) ->
    maps:put(list_to_atom(OptionName), Value, Options).
    
get_option_type(OptionName) ->
  case maps:find(OptionName, option_types()) of
    {ok, Type} -> {ok, Type};
    _          -> error
  end.

option_types() ->
    #{ 
         "username"   => string,
         "password"   => string,
         "server"     => string,
         "port"       => integer,
         "max"        => integer,
         "no_ssl"     => boolean,
         "delete"     => boolean,
         "help"       => boolean,
         "output"     => string
     }.

main(Args) ->
    OptionDefaults = #{ 
         server  => "pop.gmail.com",
         port    => 995,
         output  => "inbox",
         delete  => false
    },
    case parse_options(Args ++ ["--"], OptionDefaults) of
       error -> io:format("Try 'pop3client_downloader --help' for more information.\n");
       Options -> case maps:find(help, Options) of
                    {ok, true} -> usage();
                     _        -> NewOptions = ask_required_arguments(Options), 
                                 try
                                    run(NewOptions)
                                 catch
                                    exit:Reason -> 
                                       io:format(standard_error,"Error: ~s~n", [Reason]),
                                       halt(3)
                                 end
                  end
    end.

ask_required_arguments(Options) ->
  NewOptions = case maps:find(username, Options) of
     error -> Username = io:get_line("Please enter your email account name: ") -- "\n",
              put_option("username", Username, Options);
     _     -> Options
  end,
  case maps:find(password, NewOptions) of
     error -> Password = io:get_line("Please enter your password: ") -- "\n",
              put_option("password", Password, NewOptions);
     _     -> NewOptions
  end.

usage() ->
    io:format("" 
     ++ "usage: pop3mail_downloader [--username=USERNAME]\n"
     ++ "       [--password=PASSWORD] [--server=SERVER] [--port=PORT]\n"
     ++ "       [--max=NUMBER_OF_EMAILS] [--delete] [--no_ssl] [--help]\n"
     ++ "Read emails from the inbox and save them as .eml files on disk\n"
     ++ "in the 'inbox' subdirectory.\n"
     ++ "\n"
     ++ "-           prompt for input. Use after an option. For example: --password -\n"
     ++ "--password  account password.\n"
     ++ "--delete    delete email after downloading. Default: false\n"
     ++ "            Notice that Gmail ignores the delete\n"
     ++ "            and instead uses the Gmail account settings.\n"
     ++ "--no_ssl    Use plain tcp istead of ssl/tls. Traffic will be unsecure.\n"
     ++ "--help      show this information.\n"
     ++ "--max       maximum number of emails to download. Default: unlimited\n"
     ++ "--output    output directory. Default: inbox\n"
     ++ "--port      pop3 server port. Default: 995\n"
     ++ "--server    pop3 mailserver address. Default: pop.gmail.com\n"
     ++ "--username  Username. email account name.  Gmail users can precede the name with\n"
     ++ "            'recent:' to get the last 30 days mail, even if it has\n"
     ++ "             already been downloaded elsewhere.\n"),
    halt(1).

%%%   Convert date from email header to a standard date format: YYYYMMDD_HHMMSS
%%%   `datestr` - must be conform RFC 2822 date format
convert_date([]) -> "no-date";
convert_date(DateStr) ->
     % Example of correctly formatted date: Tue, 14 Oct 2014 19:59:31 +0200
     % Sometimes the day of the week is missing in the date. Fix that:
     % if date starts with digit, add the day first. We don't care which day it is, just add ???
     DateWithWeekDay =
        case re:run(DateStr, "^\\s?\\d") of
           nomatch -> DateStr;
           _       -> "???, " ++ DateStr
        end,
     % httpd_util requires that single digit days have a leading zero. This is not always the case.
     DayAndDate = string:trim(string:slice(DateWithWeekDay, 5), leading),
     % add leading zero
     DateWithDayAndLeadingZero =
        case re:run(DayAndDate, "^\\d\\s") of
           nomatch -> DateWithWeekDay;
           _       -> string:slice(DateWithWeekDay, 0, 5) ++ "0" ++ DayAndDate
        end,
     {{Year, Month, Day}, {Hour, Minutes, Seconds}} = httpd_util:convert_request_date(DateWithDayAndLeadingZero),
     lists:flatten(io_lib:fwrite("~4..0B~2..0B~2..0B-~2..0B~2..0B~2..0B", [Year, Month, Day, Hour, Minutes, Seconds])).


safe_convert_date(DateStr) ->
     try
        convert_date(DateStr)
     catch
        error:{badmatch, bad_date} -> "bad-date"
     end.


% charlist_retrieve(Connection, Directory, Count, Max, Delete) when Count =< Max ->
%  {ok, MailContent} = epop_client:retrieve(Connection, Count),
%  {message, HeaderList, _BodyContent } = epop_message:parse(MailContent),
%  {ok, DateStr} = epop_message:find_header(HeaderList, "Date"),
%  FileName = safe_convert_date(DateStr) ++ "-" ++ integer_to_list(erlang:phash2(HeaderList, 999999)) ++ ".eml",
%  {ok, Device} = file:open(Directory ++ "/" ++ FileName, [write, raw]),
%  file:write(Device, MailContent),
%  file:close(Device),
%  io:format("Created ~s~n", [FileName]),
%  Delete == false orelse epop_client:delete(Connection, Count),
%  charlist_retrieve(Connection, Directory, Count + 1, Max, Delete);
% charlist_retrieve(_, _, _, _, _) ->
%  ok.

% bin_retrieve(Connection, Directory, Count, Max, Delete) when Count =< Max ->
%   {ok, MailContent} = epop_client:bin_retrieve(Connection, Count),
%   {message, HeaderList, _BodyContent } = epop_message:bin_parse(MailContent),
%   {ok, DateStr} = epop_message:find_header(HeaderList, <<"Date">>),
%   FileName = safe_convert_date(erlang:binary_to_list(DateStr)) ++ "-" ++ integer_to_list(erlang:phash2(HeaderList, 999999)) ++ ".eml",
%   {ok, Device} = file:open(Directory ++ "/" ++ FileName, [write, raw]),
%   file:write(Device, MailContent),
%   file:close(Device),
%   io:format("Created ~s~n", [FileName]),
%   Delete == false orelse epop_client:delete(Connection, Count),
%   bin_retrieve(Connection, Directory, Count + 1, Max, Delete);
% bin_retrieve(_, _, _, _, _) ->
%   ok.


stream_retrieve_headers(Acc, Headers, Date) ->
  case epop_client:retrieve_next(Acc) of
    {halt,   NewAcc} -> {ok, NewAcc, lists:reverse(Headers), Date};           % no more data, ready
    {"\r\n", NewAcc} -> {ok, NewAcc, lists:reverse(["\r\n"|Headers]), Date};  % empty line, ready with headers
    {Data,   NewAcc} -> NewDate = case re:split(Data, ":", [{return, list}, {parts, 2}]) of
                           [Header, HeaderValue] -> case string:lowercase(Header) of
                                                      "date" -> string:trim(HeaderValue);
                                                      _      -> Date
                                                    end;
                           [_NotFound]    -> Date
                        end,
                        stream_retrieve_headers(NewAcc, [Data | Headers], NewDate)
  end.


stream_copy_to_file(Device, Acc) ->
  case epop_client:retrieve_next(Acc) of
    {halt, NewAcc} -> epop_client:retrieve_after(NewAcc);
    {Data, NewAcc} -> file:write(Device, Data),
                      stream_copy_to_file(Device, NewAcc)
  end.

stream_retrieve(Connection, Directory, Count, Max, Delete) when Count =< Max ->
  {ok, Acc} = epop_client:retrieve_start(Connection, Count),
  {ok, NewAcc, Headers, DateStr} = stream_retrieve_headers(Acc, [], []),
  FileName = safe_convert_date(DateStr) ++ "-" ++ integer_to_list(erlang:phash2(Headers, 999999)) ++ ".eml",
  {ok, Device} = file:open(Directory ++ "/" ++ FileName, [write, raw, delayed_write]),
  file:write(Device, Headers),
  ok = stream_copy_to_file(Device, NewAcc),
  file:close(Device),
  io:format("Created ~s~n", [FileName]),
  Delete == false orelse epop_client:delete(Connection, Count),
  stream_retrieve(Connection, Directory, Count + 1, Max, Delete);
stream_retrieve(_, _, _, _, _) ->
  ok.

run(Options) ->
  {ok, Username} = maps:find(username, Options),
  length(Username) > 0 orelse exit("Non-empty username is required."),
  {ok, Password} = maps:find(password, Options),
  length(Password) > 0 orelse exit("Non-empty password is required."),
  {ok, Server}   = maps:find(server, Options),
  {ok, Port}     = maps:find(port, Options),
  SslOptions = case maps:find(no_ssl, Options) of
      {ok, true} -> [];
      _ -> [ssl]
  end,
  {ok, Delete}     = maps:find(delete, Options),
  ConnectionOptions = SslOptions ++ [{addr, Server}, {port, Port}, {user, Username}],
  {ConnectStatus, ConnectResponse} = epop_client:connect(Username, Password, ConnectionOptions),
  ConnectStatus == ok orelse exit(ConnectResponse),
  Connection = ConnectResponse,
  {ok, {TotalCount, _TotalSize}} = epop_client:stat(Connection),
  Max = case maps:find(max, Options) of
       error -> TotalCount;
       {ok, MaxValue} -> min(MaxValue, TotalCount)
  end,
  Max > 0 orelse io:format("No more mail.~n"),
  {ok, Directory} = maps:find(output, Options),
  case file:make_dir(Directory) of
    ok -> ok;
    {error, eexist} -> ok;
    _Else -> exit("Could not create directory " ++ Directory)
  end,
  % charlist_retrieve(Connection, Directory, 1, Max, Delete),
  % bin_retrieve(Connection, Directory, 1, Max, Delete),
  stream_retrieve(Connection, Directory, 1, Max, Delete),
  epop_client:quit(Connection).
